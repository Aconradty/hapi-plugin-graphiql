diff --git a/package.json b/package.json
index 7cbe8a2..338d2ab 100644
--- a/package.json
+++ b/package.json
@@ -41,10 +41,11 @@
     "prepublish": ". ./resources/prepublish.sh"
   },
   "dependencies": {
-    "codemirror": "^5.15.2",
+    "codemirror": "^5.20.2",
     "codemirror-graphql": "^0.5.7",
-    "eslint": "^3.7.1",
-    "marked": "^0.3.5"
+    "eslint": "^3.9.0",
+    "html-to-react": "^1.2.1",
+    "marked": "^0.3.6"
   },
   "peerDependencies": {
     "graphql": "^0.6.0 || ^0.7.0",
@@ -52,28 +53,28 @@
     "react-dom": ">=0.14.8"
   },
   "devDependencies": {
-    "babel-cli": "^6.0.0",
-    "babel-eslint": "^7.0.0",
-    "babel-plugin-syntax-async-functions": "^6.0.0",
-    "babel-plugin-transform-class-properties": "^6.0.0",
-    "babel-plugin-transform-object-rest-spread": "^6.0.0",
-    "babel-preset-es2015": "^6.0.0",
-    "babel-preset-react": "^6.0.0",
-    "browserify": "^13.0.0",
-    "browserify-shim": "^3.8.0",
+    "babel-cli": "^6.18.0",
+    "babel-eslint": "^7.1.0",
+    "babel-plugin-syntax-async-functions": "^6.13.0",
+    "babel-plugin-transform-class-properties": "^6.18.0",
+    "babel-plugin-transform-object-rest-spread": "^6.16.0",
+    "babel-preset-es2015": "^6.18.0",
+    "babel-preset-react": "^6.16.0",
+    "browserify": "^13.1.1",
+    "browserify-shim": "^3.8.12",
     "chai": "3.5.0",
-    "chai-subset": "^1.0.0",
-    "eslint": "^3.7.1",
-    "eslint-plugin-babel": "^3.0.0",
-    "eslint-plugin-react": "^6.0.0",
-    "flow-bin": "^0.33.0",
-    "graphql": "^0.7.0",
-    "jsdom": "^9.0.0",
+    "chai-subset": "^1.3.0",
+    "eslint": "^3.9.0",
+    "eslint-plugin-babel": "^3.3.0",
+    "eslint-plugin-react": "^6.4.1",
+    "flow-bin": "^0.34.0",
+    "graphql": "^0.7.2",
+    "jsdom": "^9.8.3",
     "mocha": "3.1.2",
-    "react": "^15.3.0",
-    "react-addons-test-utils": "^15.3.0",
-    "react-dom": "^15.3.0",
-    "uglify-js": "^2.4.24",
-    "uglifyify": "^3.0.1"
+    "react": "^15.3.2",
+    "react-addons-test-utils": "^15.3.2",
+    "react-dom": "^15.3.2",
+    "uglify-js": "^2.7.4",
+    "uglifyify": "^3.0.4"
   }
 }
diff --git a/src/components/DocExplorer.js b/src/components/DocExplorer.js
index c2d87ef..16cc507 100644
--- a/src/components/DocExplorer.js
+++ b/src/components/DocExplorer.js
@@ -8,6 +8,7 @@
 
 import React, { PropTypes } from 'react';
 import Marked from 'marked';
+import htmlToReact from 'html-to-react';
 import {
   GraphQLSchema,
   isType,
@@ -91,6 +92,7 @@ export class DocExplorer extends React.Component {
             <FieldDoc
               key={navItem.name}
               field={navItem}
+              schema={schema}
               onClickType={this.handleClickTypeOrField}
             />;
       }
@@ -377,6 +379,8 @@ class SchemaDoc extends React.Component {
     return (
       <div>
         <MarkdownContent
+          schema={schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={
             'A GraphQL schema provides a root type for each kind of operation.'
@@ -523,12 +527,16 @@ class TypeDoc extends React.Component {
                 }
               </div>
               <MarkdownContent
+                schema={this.props.schema}
+                onClickType={this.props.onClickType}
                 className="doc-value-description"
                 markdown={value.description}
               />
               {
                 value.deprecationReason &&
                   <MarkdownContent
+                    schema={this.props.schema}
+                    onClickType={this.props.onClickType}
                     className="doc-alert-text"
                     markdown={value.deprecationReason}
                   />
@@ -542,6 +550,8 @@ class TypeDoc extends React.Component {
     return (
       <div>
         <MarkdownContent
+          schema={this.props.schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={type.description || 'No Description'}
         />
@@ -559,6 +569,7 @@ class FieldDoc extends React.Component {
 
   static propTypes = {
     field: PropTypes.object,
+    schema: PropTypes.instanceOf(GraphQLSchema),
     onClickType: PropTypes.func,
   }
 
@@ -584,6 +595,8 @@ class FieldDoc extends React.Component {
                 <TypeLink type={arg.type} onClick={this.props.onClickType} />
               </div>
               <MarkdownContent
+                schema={this.props.schema}
+                onClickType={this.props.onClickType}
                 className="doc-value-description"
                 markdown={arg.description}
               />
@@ -596,12 +609,16 @@ class FieldDoc extends React.Component {
     return (
       <div>
         <MarkdownContent
+          schema={this.props.schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={field.description || 'No Description'}
         />
         {
           field.deprecationReason &&
             <MarkdownContent
+              schema={this.props.schema}
+              onClickType={this.props.onClickType}
               className="doc-alert-text"
               markdown={field.deprecationReason}
             />
@@ -655,6 +672,8 @@ class MarkdownContent extends React.Component {
   static propTypes = {
     markdown: PropTypes.string,
     className: PropTypes.string,
+    schema: PropTypes.instanceOf(GraphQLSchema),
+    onClickType: PropTypes.func
   }
 
   shouldComponentUpdate(nextProps) {
@@ -667,12 +686,33 @@ class MarkdownContent extends React.Component {
       return <div />;
     }
 
-    const html = Marked(markdown, { sanitize: true });
-    return (
-      <div
-        className={this.props.className}
-        dangerouslySetInnerHTML={{ __html: html }}
-      />
-    );
+    let html = Marked(markdown, { sanitize: true });
+
+    html = `<div class="${this.props.className}">${html}</div>`
+
+    let typeMap = this.props.schema.getTypeMap();
+    let processNodeDefinitions = new htmlToReact.ProcessNodeDefinitions(React);
+    let instructions = [
+        {
+            shouldProcessNode: (node) => {
+                return node && node.name && node.name === "a";
+            },
+            processNode: (node, children, index) => {
+                let name = node.children.map((child) => child.data).join("");
+                let type = typeMap[name]
+                if (type === undefined)
+                    return processNodeDefinitions.processDefaultNode(node, children, index)
+                else
+                    return <TypeLink type={type} onClick={this.props.onClickType} />;
+            }
+        }, {
+            shouldProcessNode: (node) => true,
+            processNode: processNodeDefinitions.processDefaultNode
+        }
+    ];
+    var htmlToReactParser = new htmlToReact.Parser();
+    var markup = htmlToReactParser.parseWithInstructions(html, () => true, instructions);
+
+    return markup;
   }
 }
diff --git a/src/components/GraphiQL.js b/src/components/GraphiQL.js
index c1c7d5c..c9169b2 100644
--- a/src/components/GraphiQL.js
+++ b/src/components/GraphiQL.js
@@ -625,9 +625,12 @@ export class GraphiQL extends React.Component {
   }
 
   handlePrettifyQuery = () => {
-    const query = print(parse(this.state.query));
+    const query = print(parse(this.state.query)).replace(/^( +)/mg, "$1$1");
     const editor = this.queryEditorComponent.getCodeMirror();
     editor.setValue(query);
+    const variables = JSON.stringify(JSON.parse(this.state.variables), null, 4);
+    const varEditor = this.variableEditorComponent.getCodeMirror();
+    varEditor.setValue(variables);
   }
 
   handleEditQuery = value => {
