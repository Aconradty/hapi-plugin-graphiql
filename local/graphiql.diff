diff --git a/css/doc-explorer.css b/css/doc-explorer.css
index 13bf48f..8205c4d 100644
--- a/css/doc-explorer.css
+++ b/css/doc-explorer.css
@@ -68,6 +68,20 @@
   top: 47px;
 }
 
+.graphiql-container .doc-type-kind {
+  border-bottom: 1px solid #e0e0e0;
+  color: #777;
+  cursor: default;
+  font-size: 20px;
+  font-variant: small-caps;
+  font-weight: bold;
+  letter-spacing: 1px;
+  margin: 0 -15px 10px 0;
+  padding: 10px 0;
+  -webkit-user-select: none;
+          user-select: none;
+}
+
 .graphiql-container .doc-type-description p:first-child ,
 .graphiql-container .doc-type-description blockquote:first-child {
   margin-top: 0;
diff --git a/src/components/DocExplorer.js b/src/components/DocExplorer.js
index e946f31..a0d2a78 100644
--- a/src/components/DocExplorer.js
+++ b/src/components/DocExplorer.js
@@ -8,6 +8,7 @@
 
 import React, { PropTypes } from 'react';
 import Marked from 'marked';
+import htmlToReact from 'html-to-react';
 import {
   GraphQLSchema,
   isType,
@@ -94,6 +95,7 @@ export class DocExplorer extends React.Component {
             <FieldDoc
               key={navItem.name}
               field={navItem}
+              schema={schema}
               onClickType={this.handleClickTypeOrField}
             />;
         }
@@ -384,6 +386,8 @@ class SchemaDoc extends React.Component {
     return (
       <div>
         <MarkdownContent
+          schema={schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={
             'A GraphQL schema provides a root type for each kind of operation.'
@@ -537,12 +541,16 @@ class TypeDoc extends React.Component {
                 }
               </div>
               <MarkdownContent
+                schema={this.props.schema}
+                onClickType={this.props.onClickType}
                 className="doc-value-description"
                 markdown={value.description}
               />
               {
                 value.deprecationReason &&
                 <MarkdownContent
+                  schema={this.props.schema}
+                  onClickType={this.props.onClickType}
                   className="doc-alert-text"
                   markdown={value.deprecationReason}
                 />
@@ -555,7 +563,12 @@ class TypeDoc extends React.Component {
 
     return (
       <div>
+        <div className="doc-type-kind">
+          {'type'}
+        </div>
         <MarkdownContent
+          schema={this.props.schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={type.description || 'No Description'}
         />
@@ -573,6 +586,7 @@ class FieldDoc extends React.Component {
 
   static propTypes = {
     field: PropTypes.object,
+    schema: PropTypes.instanceOf(GraphQLSchema),
     onClickType: PropTypes.func,
   }
 
@@ -598,6 +612,8 @@ class FieldDoc extends React.Component {
                 <TypeLink type={arg.type} onClick={this.props.onClickType} />
               </div>
               <MarkdownContent
+                schema={this.props.schema}
+                onClickType={this.props.onClickType}
                 className="doc-value-description"
                 markdown={arg.description}
               />
@@ -609,13 +625,20 @@ class FieldDoc extends React.Component {
 
     return (
       <div>
+        <div className="doc-type-kind">
+          {'field'}
+        </div>
         <MarkdownContent
+          schema={this.props.schema}
+          onClickType={this.props.onClickType}
           className="doc-type-description"
           markdown={field.description || 'No Description'}
         />
         {
           field.deprecationReason &&
           <MarkdownContent
+            schema={this.props.schema}
+            onClickType={this.props.onClickType}
             className="doc-alert-text"
             markdown={field.deprecationReason}
           />
@@ -669,6 +692,8 @@ class MarkdownContent extends React.Component {
   static propTypes = {
     markdown: PropTypes.string,
     className: PropTypes.string,
+    schema: PropTypes.instanceOf(GraphQLSchema),
+    onClickType: PropTypes.func
   }
 
   shouldComponentUpdate(nextProps) {
@@ -681,12 +706,33 @@ class MarkdownContent extends React.Component {
       return <div />;
     }
 
-    const html = Marked(markdown, { sanitize: true });
-    return (
-      <div
-        className={this.props.className}
-        dangerouslySetInnerHTML={{ __html: html }}
-      />
-    );
+    let html = Marked(markdown, { sanitize: true });
+
+    html = `<div class="${this.props.className}">${html}</div>`
+
+    let typeMap = this.props.schema.getTypeMap();
+    let processNodeDefinitions = new htmlToReact.ProcessNodeDefinitions(React);
+    let instructions = [
+        {
+            shouldProcessNode: (node) => {
+                return node && node.name && node.name === "a";
+            },
+            processNode: (node, children, index) => {
+                let name = node.children.map((child) => child.data).join("");
+                let type = typeMap[name]
+                if (type === undefined)
+                    return processNodeDefinitions.processDefaultNode(node, children, index)
+                else
+                    return <TypeLink type={type} onClick={this.props.onClickType} />;
+            }
+        }, {
+            shouldProcessNode: (node) => true,
+            processNode: processNodeDefinitions.processDefaultNode
+        }
+    ];
+    var htmlToReactParser = new htmlToReact.Parser();
+    var markup = htmlToReactParser.parseWithInstructions(html, () => true, instructions);
+
+    return markup;
   }
 }
diff --git a/src/components/GraphiQL.js b/src/components/GraphiQL.js
index a91ea82..d81aa29 100644
--- a/src/components/GraphiQL.js
+++ b/src/components/GraphiQL.js
@@ -631,9 +631,12 @@ export class GraphiQL extends React.Component {
   }
 
   handlePrettifyQuery = () => {
-    const query = print(parse(this.state.query));
+    const query = print(parse(this.state.query)).replace(/^( +)/mg, "$1$1");
     const editor = this.queryEditorComponent.getCodeMirror();
     editor.setValue(query);
+    const variables = JSON.stringify(JSON.parse(this.state.variables), null, 4);
+    const varEditor = this.variableEditorComponent.getCodeMirror();
+    varEditor.setValue(variables);
   }
 
   handleEditQuery = value => {
